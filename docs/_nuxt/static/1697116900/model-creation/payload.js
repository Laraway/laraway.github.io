__NUXT_JSONP__("/model-creation", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A){return {data:[{page:{slug:o,description:"new Model() vs Model::create()",heading:"Способы сохранения новых данных",altHeadings:"Laraway",toc:[],body:{type:p,children:[{type:b,tag:e,props:{},children:[{type:a,value:q},{type:b,tag:i,props:{title:r,uri:s},children:[]},{type:a,value:t}]},{type:a,value:h},{type:b,tag:e,props:{},children:[{type:a,value:u},{type:b,tag:c,props:{className:[v]},children:[{type:a,value:w}]},{type:a,value:x}]},{type:a,value:h},{type:a,value:h},{type:b,tag:y,props:{heading:"Отличия",id:"compare"},children:[{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"\n    Первый пример отличается от второго и третьего только тем, что не требует\n    указания "},{type:b,tag:c,props:{className:[f,"variable"]},children:[{type:a,value:"$fillable"}]},{type:a,value:" в модели.\n  "}]},{type:a,value:d},{type:b,tag:j,props:{name:"cases\u002Fmodel-creation\u002Fnew"},children:[]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"\n    Второй и третий примеры ничем не отличаются, кроме того, что вариант с "},{type:b,tag:c,props:{className:[f,k]},children:[{type:a,value:z}]},{type:a,value:"\n    более компактен.\n  "}]},{type:a,value:d},{type:b,tag:j,props:{name:"cases\u002Fmodel-creation\u002Ffill"},children:[]},{type:a,value:d},{type:b,tag:j,props:{name:"cases\u002Fmodel-creation\u002Fcreate"},children:[]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"\n    В четвёртом примере используется метод\n    "},{type:b,tag:i,props:{title:n,type:A,uri:"Illuminate\u002FDatabase\u002FQuery\u002FBuilder.html#method_insert"},children:[]},{type:a,value:",\n    который возвращает "},{type:b,tag:c,props:{className:[f]},children:[{type:a,value:"boolean"}]},{type:a,value:", а не саму модель.\n    Также метод не заполнит автоматически поля "},{type:b,tag:c,props:{className:[f]},children:[{type:a,value:"created_at"}]},{type:a,value:" и "},{type:b,tag:c,props:{className:[f]},children:[{type:a,value:"updated_at"}]},{type:a,value:",\n    касты и события модели работать не будут, т.к. метод является частью QueryBuilder, а не модели.\n  "}]},{type:a,value:d},{type:b,tag:j,props:{name:"cases\u002Fmodel-creation\u002Finsert"},children:[]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"\n    Метод\n    "},{type:b,tag:i,props:{title:"insertGetId()",type:A,uri:"Illuminate\u002FDatabase\u002FQuery\u002FBuilder.html#method_insertGetId"},children:[]},{type:a,value:"\n    работает аналогично и возвращает ID вставленной записи, при этом за один раз сохранить можно только одну запись, в отличии от простого\n    "},{type:b,tag:c,props:{className:[f,k]},children:[{type:a,value:n}]},{type:a,value:", который позволяет сохранять несколько записей.\n  "}]},{type:a,value:h}]},{type:a,value:h},{type:b,tag:y,props:{heading:"Выводы",id:"summary"},children:[{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"\n    Можно выбрать любой способ.\n    Если не нужен ручной контроль и стремиться за лаконичностью, то "},{type:b,tag:c,props:{className:[f,k]},children:[{type:a,value:z}]},{type:a,value:",\n    если необходимо сохранить много записей за раз, то "},{type:b,tag:c,props:{className:[f,k]},children:[{type:a,value:n}]},{type:a,value:d}]},{type:a,value:h}]}]},excerpt:{type:p,children:[{type:b,tag:e,props:{},children:[{type:a,value:q},{type:b,tag:i,props:{title:r,uri:s},children:[]},{type:a,value:t}]},{type:a,value:h},{type:b,tag:e,props:{},children:[{type:a,value:u},{type:b,tag:c,props:{className:[v]},children:[{type:a,value:w}]},{type:a,value:x}]}]},dir:"\u002Fcases",path:"\u002Fcases\u002Fmodel-creation",extension:".md",createdAt:"2022-08-15T13:41:49.960Z",updatedAt:"2022-08-15T19:05:35.578Z"},id:o}],fetch:{"CodeChips:0":{_error:{message:"request to http:\u002F\u002Flocalhost:3000\u002F_content\u002Fcode-chips\u002Fout\u002Fcases\u002Fmodel-creation\u002Fnew.md failed, reason: connect ECONNREFUSED 127.0.0.1:3000",type:l,errno:g,code:g,statusCode:m}},"CodeChips:1":{_error:{message:"request to http:\u002F\u002Flocalhost:3000\u002F_content\u002Fcode-chips\u002Fout\u002Fcases\u002Fmodel-creation\u002Ffill.md failed, reason: connect ECONNREFUSED 127.0.0.1:3000",type:l,errno:g,code:g,statusCode:m}},"CodeChips:2":{_error:{message:"request to http:\u002F\u002Flocalhost:3000\u002F_content\u002Fcode-chips\u002Fout\u002Fcases\u002Fmodel-creation\u002Fcreate.md failed, reason: connect ECONNREFUSED 127.0.0.1:3000",type:l,errno:g,code:g,statusCode:m}},"CodeChips:3":{_error:{message:"request to http:\u002F\u002Flocalhost:3000\u002F_content\u002Fcode-chips\u002Fout\u002Fcases\u002Fmodel-creation\u002Finsert.md failed, reason: connect ECONNREFUSED 127.0.0.1:3000",type:l,errno:g,code:g,statusCode:m}}},mutations:[]}}("text","element","span","\n  ","p","bit","ECONNREFUSED","\n","laravel-link","code-chips","code","system",500,"insert()","model-creation","root","\n  Согласно ","документации","eloquent#inserts","\n  есть несколько способов создать новую модель и сохранить данные в БД.\n","\n  Это неизбежно приводит к вопросу «Как правильно\u002Fлучше?» и обычно тема перетекает в холивар,\n  с доводами а-ля\n  ","italic","\"у нас в проекте пишут вот так\"",".\n","case-context-section","create()","api")));
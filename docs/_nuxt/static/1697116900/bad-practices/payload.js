__NUXT_JSONP__("/bad-practices", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P){return {data:[{content:[{slug:"config",toc:[],body:{type:m,children:[{type:b,tag:d,props:{},children:[{type:a,value:"\n  Использовать хелпер "},{type:b,tag:f,props:{className:[g,l]},children:[{type:a,value:F}]},{type:a,value:"\n  следует только в файлах конфигурации.\n"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  Это связано с тем, что после кэширования конфига, "},{type:b,tag:f,props:{className:[g,l]},children:[{type:a,value:F}]},{type:a,value:"\n  не будет возвращать значения из файла "},{type:b,tag:f,props:{className:[g,u]},children:[{type:a,value:".env"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  Об этом говорится в\n  "},{type:b,tag:s,props:{title:x,uri:"configuration#configuration-caching"},children:[]},{type:a,value:",\n  но к сожалению, часто упускается новичками.\n"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  Получать значения необходимо только через "},{type:b,tag:f,props:{className:[g,l]},children:[{type:a,value:"config()"}]},{type:a,value:c}]}]},dir:n,path:"\u002Fbad-practices\u002Fconfig",extension:o,createdAt:h,updatedAt:h},{slug:"constructor-controller",toc:[],body:{type:m,children:[{type:b,tag:d,props:{},children:[{type:a,value:"\n  Следующий пример - результат наличия логики в контроллере\n  и, как следствие, попытка \"разгрузить\" методы.\n  Требовать зависимости необходимо в конструкторе "},{type:b,tag:t,props:{},children:[{type:a,value:"сервиса, а не контроллера"}]},{type:a,value:v}]},{type:a,value:c},{type:b,tag:i,props:{name:"bad-practices\u002Fconstructor-controller\u002Fbad",type:q},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  Что в этом коде такого, спросишь ты?\n"}]},{type:a,value:c},{type:b,tag:"ol",props:{className:["list-decimal","ml-5"]},children:[{type:a,value:p},{type:b,tag:w,props:{className:[y]},children:[{type:a,value:"\n    "},{type:b,tag:t,props:{},children:[{type:a,value:"Он бесполезен."}]},{type:a,value:" Визуально кажется,\n    что сервис используется в разных методах и логично инициализацию вынести в одно место, но\n    методы контроллера не должны вызывать соседние методы, даже если они приватные\n    (которых не должно быть в контроллере).\n    Следовательно сервис используется только в одном методе на один запрос\n    и больше не будет вызван в рамках жизненного цикла для текущего контроллера,\n    поэтому использование "},{type:b,tag:f,props:{className:[g,z]},children:[{type:a,value:"$this-\u003Eservice"}]},{type:a,value:" в контроллере обычно не имеет смысла.\n  "}]},{type:a,value:p},{type:b,tag:w,props:{className:[y]},children:[{type:a,value:"\n    Не всем методам может понадобиться один и тот же сервис, зачем его загружать для всех запросов? Незачем.\n  "}]},{type:a,value:p},{type:b,tag:w,props:{className:[y]},children:[{type:a,value:"\n    И самое важное, "},{type:b,tag:t,props:{},children:[{type:a,value:"конструктор вызывается раньше чем сами методы"}]},{type:a,value:".\n    Если внимательно почитать "},{type:b,tag:s,props:{title:G,uri:"controllers#controller-middleware"},children:[]},{type:a,value:",\n    то можно узнать, что в конструкторе контроллера можно указывать "},{type:b,tag:s,props:{title:"«middleware»",uri:"middleware"},children:[]},{type:a,value:"\n    (для порядка и удобства рекомендую указывать их только в роутах), а значит сам контроллер создаётся до этапа\n    выполнения \"мидлварок\" и в момент создания сервиса ещё будут недоступны некоторые функции, например, сессия и куки,\n    а значит отсутствовать и авторизация. И если конструктор сервиса зависит от подобных вещей,\n    то работать правильно он не сможет, а отладка бага может занять некоторое время.\n  "}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  Поэтому запрашивай необходимые сервисы в методах контроллера:\n"}]},{type:a,value:c},{type:b,tag:i,props:{name:"bad-practices\u002Fconstructor-controller\u002Fgood",type:r},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  Последний пример не является нарушением DRY. Даже если в разных методах сервис используется одинаково,\n  то это всё равно не повод выносить куда-либо, ибо \"экшены\" контроллера независимы друг от друга\n  и в любой момент может понадобиться внести изменения в один из них.\n  И если методы получились полностью одинаковыми, то всё равно вызов логики - это не сама логика.\n"}]}]},dir:n,path:"\u002Fbad-practices\u002Fconstructor-controller",extension:o,createdAt:h,updatedAt:"2022-11-13T16:22:31.989Z"},{slug:"di",toc:[],body:{type:m,children:[{type:b,tag:d,props:{className:["italic"]},children:[{type:a,value:p},{type:b,tag:t,props:{},children:[{type:a,value:"«Качественный дизайн должен обладать слабой связанностью (low coupling) и сильной связностью (high cohesion)»"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  Тема IoC (Inversion of Control) достаточна обширна и выходит за рамки данного ресурса,\n  поэтому если не знаком, то рекомендую поскорее закрыть этот пробел, хотя бы в общих чертах.\n  "},{type:b,tag:A,props:{},children:[]},{type:a,value:"Также необходимо ознакомиться с документацией\n  "},{type:b,tag:s,props:{title:"Service Container",uri:"container#introduction"},children:[]},{type:a,value:v}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Рассмотрим простой метод:"}]},{type:a,value:c},{type:b,tag:i,props:{name:"bad-practices\u002Fdi\u002Fbad",type:q},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  Проблема данного кода, что он имеет высокую связанность, т.к. в нем создаётся новый объект.\n  Ситуация усугубляется ещё больше, когда данный сервис начинает требовать какие-либо зависимости,\n  а те зависимости, в свою очередь, требуют свои зависимости и так далее...\n"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Также такой код будет затруднительно тестировать, т.к. сервис нельзя \"замокать\"."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Вместо прямого создания объекта необходимо использовать DI, реализация которого уже есть в Laravel:"}]},{type:a,value:c},{type:b,tag:i,props:{name:"bad-practices\u002Fdi\u002Fgood",type:r},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  И если следовать букве D из «SOLID», то в данном примере\n  "},{type:b,tag:f,props:{className:[g,l]},children:[{type:a,value:"MyService"}]},{type:a,value:" должен быть абстракцией, а не конкретным классом (реализацией).\n"}]}]},dir:n,path:"\u002Fbad-practices\u002Fdi",extension:o,createdAt:h,updatedAt:h},{slug:"document-root",toc:[],body:{type:m,children:[{type:b,tag:d,props:{},children:[{type:a,value:"\n  Самая популярная ошибка у начинающих, которые невнимательно читают\n  "},{type:b,tag:s,props:{title:G,uri:"deployment#server-configuration"},children:[]},{type:a,value:",\n  в которой сказано, что запросы должны приходить в "},{type:b,tag:f,props:{className:[g,u]},children:[{type:a,value:"public\u002Findex.php"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  Чаще всего проблема вызвана попыткой завести лару на виртуальном хостинге (shared hosting),\n  который не позволяет управлять корневой директорией web-сервера.\n"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  В результате начинающие перемещают "},{type:b,tag:f,props:{className:[g,u]},children:[{type:a,value:"index.php"}]},{type:a,value:" в корень фреймворка и\u002Fили размещают\n  "},{type:b,tag:f,props:{className:[g,u]},children:[{type:a,value:".htaccess"}]},{type:a,value:" в котором настраивают перенаправление в "},{type:b,tag:f,props:{className:[g,u]},children:[{type:a,value:B}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:i,props:{name:"bad-practices\u002Fdocument-root\u002Fbad",type:q},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  Это серьёзная проблема безопасности, а в случае с Apache ещё страдает и производительность.\n  Приложение должно находиться за пределами публичной директории, а web-сервер \"смотреть\"\n  в "},{type:b,tag:f,props:{className:[g,u]},children:[{type:a,value:B}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:i,props:{name:"bad-practices\u002Fdocument-root\u002Fgood",type:r},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  Если нет возможности изменить document_root,\n  то читай "},{type:b,tag:C,props:{to:"\u002Fshared-hosting\u002F"},children:[{type:a,value:"«Как установить Laravel на хостинг»"}]},{type:a,value:v}]}]},dir:n,path:"\u002Fbad-practices\u002Fdocument-root",extension:o,createdAt:h,updatedAt:"2022-08-15T19:36:23.181Z"},{slug:"files",toc:[],body:{type:m,children:[{type:b,tag:d,props:{},children:[{type:a,value:"\n  По непонятным причинам многие новички пишут пользовательские файлы в "},{type:b,tag:f,props:{className:[g,u]},children:[{type:a,value:B}]},{type:a,value:"\n  директорию."},{type:b,tag:A,props:{},children:[]},{type:a,value:"\n  Согласно "},{type:b,tag:s,props:{title:x,uri:"structure#the-storage-directory"},children:[]},{type:a,value:", для хранения файлов\n  есть директории "},{type:b,tag:f,props:{className:[g,u]},children:[{type:a,value:"\u002Fstorage\u002Fapp"}]},{type:a,value:" для приватных файлов и "},{type:b,tag:f,props:{className:[g,u]},children:[{type:a,value:"storage\u002Fapp\u002Fpublic"}]},{type:a,value:"\n  для общедоступных.\n"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  Технической проблемы \"хранения в public\" нет, кроме того факта, что все файлы будут всегда доступны напрямую,\n  и нельзя программно контролировать их доступ, например, по временной ссылке.\n  Также это не интуитивный момент для других разработчиков, они, как и сторонние пакеты, будут использовать\n  "},{type:b,tag:f,props:{className:[g,u]},children:[{type:a,value:H}]},{type:a,value:" и в проекте появится двойственность,\n  одни файлы будут в storage, другие в public.\n"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  В Laravel есть "},{type:b,tag:s,props:{title:"мощная система",uri:"filesystem#introduction"},children:[]},{type:a,value:" по работе с файлами,\n  с конфигурацией на "},{type:b,tag:f,props:{className:[g,u]},children:[{type:a,value:H}]},{type:a,value:" и которую легко можно изменить\n  под собственные нужды, вплоть до написания собственного драйвера.\n"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  Ещё одна популярная ошибка это использование хелпера "},{type:b,tag:f,props:{className:[g,l]},children:[{type:a,value:"storage_path()"}]},{type:a,value:" вместо фасада\n  "},{type:b,tag:f,props:{className:[g,l]},children:[{type:a,value:"Storage"}]},{type:a,value:".\n  Вся нужная информация есть в "},{type:b,tag:s,props:{title:x,uri:"filesystem"},children:[]},{type:a,value:"\n  и рекомендую почитать простую инструкцию\n  "},{type:b,tag:C,props:{to:"\u002Fstorage\u002F"},children:[{type:a,value:"\n    «Как работать с файлами»\n  "}]},{type:a,value:v}]}]},dir:n,path:"\u002Fbad-practices\u002Ffiles",extension:o,createdAt:h,updatedAt:"2022-08-15T19:36:23.149Z"},{slug:"filter-collection",toc:[],body:{type:m,children:[{type:b,tag:d,props:{},children:[{type:a,value:"\n  Популярная ошибка у новичков, которые не задумываются как работает их код, а смотрят лишь на результат.\n  Оба примера ниже дают одинаковый результат, но работают с разной эффективностью.\n"}]},{type:a,value:c},{type:b,tag:i,props:{name:"bad-practices\u002Ffilter-collection\u002Fbad",type:q},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  В первом случае, всё что после методов "},{type:b,tag:f,props:{className:[g,l]},children:[{type:a,value:"get()"}]},{type:a,value:"\n  или "},{type:b,tag:f,props:{className:[g,l]},children:[{type:a,value:I}]},{type:a,value:" является коллекцией моделей. Запрос к БД уже выполнен.\n  Т.е. выбираются все записи из таблицы и затем на уровне php фильтруется\u002Fсортируется коллекция.\n"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  Правильный вариант - выбирать запросом "},{type:b,tag:t,props:{},children:[{type:a,value:"только необходимые записи"}]},{type:a,value:"\n  и сортировать их на уровне БД.\n"}]},{type:a,value:c},{type:b,tag:i,props:{name:"bad-practices\u002Ffilter-collection\u002Fgood",type:r},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  Всё, что можно сделать на уровне БД, то лучше делать там, т.к. СУБД имеет оптимизированные алгоритмы для таких задач.\n  Редкие кейсы со сложными сортировками и группировками,\n  которые не позволяет сделать СУБД, можно выполнять на уровне коллекций или массивов в php.\n"}]}]},dir:n,path:"\u002Fbad-practices\u002Ffilter-collection",extension:o,createdAt:h,updatedAt:h},{slug:"get-user",toc:[],body:{type:m,children:[{type:b,tag:d,props:{},children:[{type:a,value:"\n  Популярнейшая проблема встречается в коде начинающих:\n"}]},{type:a,value:c},{type:b,tag:i,props:{name:"bad-practices\u002Fget-user\u002Fbad",type:q},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  В примере выше происходит бесполезная выборка из БД. "},{type:b,tag:f,props:{className:[g,l]},children:[{type:a,value:J}]},{type:a,value:"\n  уже возвращает модель авторизированного пользователя. Нет смысла вытаскивать данные ещё раз через\n  "},{type:b,tag:f,props:{className:[g,l]},children:[{type:a,value:"User::find()"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:i,props:{name:"bad-practices\u002Fget-user\u002Fgood",type:r},children:[]},{type:a,value:c},{type:b,tag:D,props:{},children:[{type:a,value:p},{type:b,tag:w,props:{},children:[{type:a,value:"\n    Если пользователь не авторизирован,\n    то "},{type:b,tag:f,props:{className:[g,l]},children:[{type:a,value:J}]},{type:a,value:"\n    вернёт "},{type:b,tag:f,props:{className:[g,"special-value"]},children:[{type:a,value:"null"}]},{type:a,value:p}]},{type:a,value:p},{type:b,tag:w,props:{},children:[{type:a,value:"\n    Фасад "},{type:b,tag:f,props:{className:[g,l]},children:[{type:a,value:"Auth"}]},{type:a,value:"\n    и хелпер "},{type:b,tag:f,props:{className:[g,l]},children:[{type:a,value:"auth()"}]},{type:a,value:"\n    эквивалентны\n  "}]},{type:a,value:c}]}]},dir:n,path:"\u002Fbad-practices\u002Fget-user",extension:o,createdAt:h,updatedAt:h},{slug:"hardcode",toc:[],body:{type:m,children:[{type:b,tag:d,props:{},children:[{type:a,value:"Избегай использования жёстко заданных значений прямо в коде."}]},{type:a,value:c},{type:b,tag:i,props:{name:"bad-practices\u002Fhardcode\u002Fbad",type:q},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  Выноси значения в конфиги, переводы, константы и базу данных.\n"}]},{type:a,value:c},{type:b,tag:i,props:{name:"bad-practices\u002Fhardcode\u002Fgood",type:r},children:[]}]},dir:n,path:"\u002Fbad-practices\u002Fhardcode",extension:o,createdAt:h,updatedAt:h},{slug:"heavy-controllers",toc:[],body:{type:m,children:[{type:b,tag:d,props:{},children:[{type:a,value:"\n  Наверняка ты уже слышал фразу "},{type:b,tag:t,props:{},children:[{type:a,value:"«Толстые контроллеры - это плохо»"}]},{type:a,value:v}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  Приводить объёмные примеры логики в контроллере не вижу смысла.\n  Рекомендую почитать "},{type:b,tag:E,props:{title:"книгу",link:"https:\u002F\u002Fgithub.com\u002Fadelf\u002Facwa_book_ru"},children:[]},{type:a,value:" указанную выше.\n  В ней присутствуют хорошие примеры и объяснения что делать.\n"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  Здесь же скажу кратко: "},{type:b,tag:t,props:{},children:[{type:a,value:"Контроллер принимает входящий запрос,\n  вызывает необходимые действия (сервисы, экшены, команды) и возвращает ответ клиенту."}]},{type:a,value:"\n  Ничего более в нем быть не должно.\n"}]}]},dir:n,path:"\u002Fbad-practices\u002Fheavy-controllers",extension:o,createdAt:h,updatedAt:h},{slug:"heavy-query",toc:[],body:{type:m,children:[{type:b,tag:d,props:{},children:[{type:a,value:"\n  В первом примере код выбирает все записи из БД.\n  Это хорошо работает пока в таблице пару десятков или даже сотен записей.\n"}]},{type:a,value:c},{type:b,tag:i,props:{name:"bad-practices\u002Fheavy-query\u002Fbad",type:q},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  Но когда количество записей в таблице заметно возрастает, то начинаются проблемы с производительностью\n  и такие запросы долго выполняются и потребляют большое количество памяти.\n"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  Поэтому рекомендуется не использовать метод "},{type:b,tag:f,props:{className:[g,l]},children:[{type:a,value:I}]},{type:a,value:",\n  а ограничивать количество записей, например, с помощью пагинации или явно указав лимит.\n"}]},{type:a,value:c},{type:b,tag:i,props:{name:"bad-practices\u002Fheavy-query\u002Fgood",type:r},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  Иногда действительно необходимо получить все записи из небольшой таблицы,\n  например, цвета товара или статусы заказа. Даже в таком случае лучше перестраховаться и ограничить выборку.\n"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  Другой вариант используется для выборки всех записей из большой таблицы, например,\n  нам необходимо обработать каждую запись или экспортировать в файл.\n  Для этого необходимо использовать метод "},{type:b,tag:f,props:{className:[g,l]},children:[{type:a,value:"chunk()"}]},{type:a,value:",\n  который будет порционно доставать записи, снижая нагрузку на БД и экономя память. Подробнее можно почитать в\n  "},{type:b,tag:s,props:{title:x,uri:"eloquent#chunking-results"},children:[]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:i,props:{name:"bad-practices\u002Fheavy-query\u002Fchunk",type:r},children:[]}]},dir:n,path:"\u002Fbad-practices\u002Fheavy-query",extension:o,createdAt:h,updatedAt:h},{slug:"heavy-routes",toc:[],body:{type:m,children:[{type:b,tag:d,props:{},children:[{type:a,value:"В документации логика в роутах используется для наглядности примеров, не более."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  В роутах можно что-то протестировать быстро для себя,\n  но потом обязательно удалить или перенести в контроллер,\n  хуже места для написания любой логики придумать сложно.\n"}]},{type:a,value:c},{type:b,tag:i,props:{name:"bad-practices\u002Fheavy-routes\u002Fbad",type:q},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  Даже что-то крайне простое (возврат шаблонов, редиректы) лучше вынести в контроллер или использовать\n  готовые для этого методы.\n"}]},{type:a,value:c},{type:b,tag:i,props:{name:"bad-practices\u002Fheavy-routes\u002Fgood",type:r},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  Стоит отметить, что на практике использование "},{type:b,tag:f,props:{className:[g,l]},children:[{type:a,value:"Route::view()"}]},{type:a,value:" неоправданно, т.к.\n  это вносит двойственность (где-то шаблоны возвращаются роутами, а где-то контроллерами) и чтобы добавить\n  какую-либо логику, необходимо всё равно создавать контроллер.\n"}]}]},dir:n,path:"\u002Fbad-practices\u002Fheavy-routes",extension:o,createdAt:h,updatedAt:h},{slug:"heavy-views",toc:[],body:{type:m,children:[{type:b,tag:d,props:{},children:[{type:a,value:"\n  Иногда начинающих ставит в тупик требование не использовать логику в шаблонах, «как же тогда выводить данные?».\n"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  Всё просто, всё что можно подготовить заранее - вынеси и подготовь заранее.\n  В шаблоне должна остаться только логика отвечающая за само отображение.\n  Можно вызывать сервисы и хелперы,\n  обращаться к константам, но "},{type:b,tag:t,props:{},children:[{type:a,value:"никаких запросов к БД из шаблонов быть не должно"}]},{type:a,value:v}]},{type:a,value:c},{type:b,tag:i,props:{name:"bad-practices\u002Fheavy-views\u002Fbad",type:q},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  Кейсы бывают разные и порой сложно полностью отказаться от использования php и определения новых переменных, но\n  всегда старайся свести к минимуму, особенно избавиться от каких-то вычислений не связанных с вёрсткой.\n  В примере выше, подсчитывается общая цена при переборе товаров.\n  Это ужаснейшая идея реализовывать подобную логику в шаблоне. Либо считай заранее в сервисе\u002Fконтроллере,\n  либо вызывай сервис из шаблона, который подсчитает, но не пиши прямо в блейде.\n"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  Представь,\n  что тебе надо будет изменить формулу ценообразования и учитывать текущие акции, код может вырасти на десятки строк,\n  а у тебя 5 разных шаблонов, где отображается товар, в каждый будешь копипастить?\n  Вроде смешно, но это история из реального проекта и смешного в ней нет ничего.\n"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:p},{type:b,tag:t,props:{},children:[{type:a,value:"Чем чище html, тем лучше."}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:i,props:{name:"bad-practices\u002Fheavy-views\u002Fgood",type:r},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  Также не стоит забывать, что шаблон может быть переиспользован на странице несколько раз\n  и если в нем присутствует тяжёлая логика, например, какой-то цикл с вызовом сервиса,\n  то каждое использование шаблона будет\n  повторно запускать этот код, поэтому крайне рекомендуется передавать\n  в шаблон максимально подготовленные данные, на сколько позволяет ситуация, конечно же.\n"}]}]},dir:n,path:"\u002Fbad-practices\u002Fheavy-views",extension:o,createdAt:h,updatedAt:h},{slug:"lazy-load",toc:[],body:{type:m,children:[{type:b,tag:d,props:{},children:[{type:a,value:p},{type:b,tag:t,props:{},children:[{type:a,value:"Сколько запросов к БД происходит в примере ниже?"}]},{type:a,value:" Попробуй посчитать самостоятельно,\n  при условии, что каждый пост имеет 5 комментариев и всего выбрано 10 постов (такие вопросы могут задавать на собеседованиях).\n"}]},{type:a,value:c},{type:b,tag:i,props:{name:"bad-practices\u002Flazy-load\u002Fbad",type:q},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  Посчитал? Теперь давай разберёмся. Мы выбираем 10 постов из БД одним запросом и передаём коллекцию в шаблон.\n  В шаблоне мы перебираем посты и обращаемся на связь "},{type:b,tag:f,props:{className:[g,l]},children:[{type:a,value:"$post-\u003Ecomments"}]},{type:a,value:".\n  Каждое такое обращение это +1 запрос к таблице "},{type:b,tag:f,props:{className:[g]},children:[{type:a,value:"comments"}]},{type:a,value:", в котором подгружаются\n  комментарии к посту. Значит на 10 постов +10 запросов, итого уже 11. Далее происходит перебор комментариев\n  (мы условились что их 5 у каждого поста) и у каждого комментария есть обращение на связь\n  "},{type:b,tag:f,props:{className:[g,l]},children:[{type:a,value:"$comment-\u003Euser"}]},{type:a,value:", чтобы получить автора комментария,\n  т.е. ещё +1 запрос на каждый комментарий, а значит 10*5 = +50 запросов. Итого имеем 61 запрос к БД.\n"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:p},{type:b,tag:t,props:{},children:[{type:a,value:"Эта называется «проблема N+1»"}]},{type:a,value:". В реальности постов и комментариев на одной странице может быть больше\n  и количество запросов легко переходит в сотни (например 10 постов по 30 комментариев в итоге даст 311 запросов).\n"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  Чтобы исправить данную проблему существует понятие "},{type:b,tag:t,props:{},children:[{type:a,value:"«Eager Loading»"}]},{type:a,value:" или «Жадная загрузка», смысл которой\n  заранее получить все необходимые данные для отображения, а не делать запросы из циклов по требованию (ленивая загрузка).\n  В Laravel это предусмотрено, читай раздел "},{type:b,tag:s,props:{title:"документации «Eager Loading»",uri:"eloquent-relationships#eager-loading"},children:[]},{type:a,value:v}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  Исправим наш запрос в контроллере с помощью "},{type:b,tag:f,props:{className:[g,l]},children:[{type:a,value:"with()"}]},{type:a,value:":\n"}]},{type:a,value:c},{type:b,tag:i,props:{name:"bad-practices\u002Flazy-load\u002Fgood",type:r},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  По итогу получаем всего 3 запроса к БД вместо 61: посты, комментарии и авторы комментариев.\n"}]},{type:a,value:c},{type:b,tag:D,props:{},children:[{type:a,value:p},{type:b,tag:w,props:{},children:[{type:a,value:"\n    Начиная с 8-ой версии появилась возможность отключить ленивую загрузку,\n    чтобы случайно не обратиться к связям, которые не были загружены заранее.\n    Подробнее читай в\n    "},{type:b,tag:s,props:{title:x,uri:"eloquent-relationships#preventing-lazy-loading"},children:[]},{type:a,value:p}]},{type:a,value:p},{type:b,tag:w,props:{},children:[{type:a,value:"\n    Laravel сам загрузит все необходимые связи указанные в цепочке.\n    Нет необходимости указывать отдельно:\n    "},{type:b,tag:f,props:{className:[g,l]},children:[{type:a,value:"with('comments', 'comments.user')"}]},{type:a,value:", хоть это и не будет ошибкой.\n  "}]},{type:a,value:c}]}]},dir:n,path:"\u002Fbad-practices\u002Flazy-load",extension:o,createdAt:h,updatedAt:h},{slug:"loop-query",toc:[],body:{type:m,children:[{type:b,tag:d,props:{},children:[{type:a,value:"\n  Код ниже сгенерирует по 2 запроса на каждую итерацию.\n  Если в "},{type:b,tag:f,props:{className:[g,z]},children:[{type:a,value:"$ids"}]},{type:a,value:" 100 элементов, значит запросов будет 200, если 500, то 1000...\n"}]},{type:a,value:c},{type:b,tag:i,props:{name:"bad-practices\u002Fwhile-query\u002Fbad",type:q},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  Есть редкие кейсы, когда выгоднее или проще создать много запросов, чем писать несколько, но сложных, особенно\n  если код будет выполняться в фоне, не важно сколько времени это может занять\n  и какую нагрузку дать на сервер.\n"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:p},{type:b,tag:t,props:{},children:[{type:a,value:"Но в подавляющем большинстве случаев"}]},{type:a,value:" необходимо избегать использования запросов к БД из циклов.\n"}]},{type:a,value:c},{type:b,tag:i,props:{name:"bad-practices\u002Fwhile-query\u002Fgood",type:r},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  Также обязательно прочти "},{type:b,tag:C,props:{to:"\u002Fbad-practices#lazy-load"},children:[{type:a,value:"«Ленивая загрузка связей»"}]},{type:a,value:",\n  т.к. тема тоже относится к данной проблеме, но менее интуитивна для начинающих.\n"}]}]},dir:n,path:"\u002Fbad-practices\u002Floop-query",extension:o,createdAt:h,updatedAt:h},{slug:"mass-assignment",toc:[],body:{type:m,children:[{type:b,tag:d,props:{},children:[{type:a,value:"\n  Немного спорный вопрос, балансирующий между \"краткостью\" и \"контролем\".\n"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  В первом примере заполнение полей происходит вручную и код выглядит громоздко.\n"}]},{type:a,value:c},{type:b,tag:i,props:{name:"bad-practices\u002Fmass-assignment\u002Fbad"},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  Во втором примере используется массовое заполнение и код выглядит компактно.\n"}]},{type:a,value:c},{type:b,tag:i,props:{name:"bad-practices\u002Fmass-assignment\u002Fgood"},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  На практике второй вариант обычно предпочтителен,\n  т.к. имеет лаконичный формат и снижает риск опечаток в именах полей.\n  Требует указания "},{type:b,tag:f,props:{className:[g,z]},children:[{type:a,value:"$fillable"}]},{type:a,value:" в модели.\n"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  С другой стороны, первый вариант, более явный, сразу видно какие поля сохраняются\n  и удобно добавить новое, но необходимо вручную перечислять все поля.\n"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  Можно использовать оба варианта вместе:\n"}]},{type:a,value:c},{type:b,tag:i,props:{name:"bad-practices\u002Fmass-assignment\u002Fcompromise"},children:[]}]},dir:n,path:"\u002Fbad-practices\u002Fmass-assignment",extension:o,createdAt:h,updatedAt:h},{slug:"model-update",toc:[],body:{type:m,children:[{type:b,tag:d,props:{},children:[{type:a,value:"\n  Чтобы обновить данные, часто можно встретить такой код:\n"}]},{type:a,value:c},{type:b,tag:i,props:{name:"bad-practices\u002Fmodel-update\u002Fwarning"},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  В данном примере нет проблем, если получаемые данные нужны для каких-либо действий,\n  например, для ответа клиенту.\n"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  Если же задача просто обновить данные в БД, то "},{type:b,tag:f,props:{className:[g,l]},children:[{type:a,value:"Post::find()"}]},{type:a,value:"\n  не нужен, т.к. это лишний "},{type:b,tag:f,props:{className:[g]},children:[{type:a,value:"SELECT"}]},{type:a,value:" запрос.\n  Достаточно выполнить "},{type:b,tag:f,props:{className:[g]},children:[{type:a,value:"UPDATE"}]},{type:a,value:" запрос напрямую, без выборки:\n"}]},{type:a,value:c},{type:b,tag:i,props:{name:"bad-practices\u002Fmodel-update\u002Fgood"},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  Следует различать методы модели и билдера:\n"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:p},{type:b,tag:s,props:{title:"Illuminate\u002FDatabase\u002FEloquent\u002FModel::update",uri:"Illuminate\u002FDatabase\u002FEloquent\u002FModel.html#method_update",type:K,className:[L]},children:[]},{type:a,value:p},{type:b,tag:A,props:{},children:[]},{type:a,value:p},{type:b,tag:s,props:{title:"Illuminate\u002FDatabase\u002FEloquent\u002FBuilder::update",uri:"Illuminate\u002FDatabase\u002FEloquent\u002FBuilder.html#method_update",type:K,className:[L]},children:[]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  В первом примере используется метод модели, во втором - билдера.\n  Оба варианта правильные, но второй предпочтителен, если нужно только обновить данные. Стоит отметить,\n  что "},{type:b,tag:t,props:{},children:[{type:a,value:"события, при таком обновлении, не будут вызваны"}]},{type:a,value:v}]}]},dir:n,path:"\u002Fbad-practices\u002Fmodel-update",extension:o,createdAt:h,updatedAt:h},{slug:"naming",toc:[],body:{type:m,children:[{type:b,tag:d,props:{},children:[{type:a,value:"\n  Данная тема не относится к самому фреймворку и вроде всё понятно и нечего обсуждать,\n  но каждый день в чатах скидывают код, в котором совершены одни и те же ошибки именования.\n"}]},{type:a,value:c},{type:b,tag:i,props:{name:"bad-practices\u002Fnaming\u002Fbad",type:q},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  Принцип простой - названия переменных, методов, классов и т.п.\n  должны отражать содержимое или предназначение.\n  Обрати внимание, что "},{type:b,tag:t,props:{},children:[{type:a,value:"\"содержимое\" это не тип данных"}]},{type:a,value:v}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  Если переменная содержит много элементов (массив, коллекция), то имя во множественном числе, иначе в единственном.\n"}]},{type:a,value:c},{type:b,tag:i,props:{name:"bad-practices\u002Fnaming\u002Fgood",type:r},children:[]}]},dir:n,path:"\u002Fbad-practices\u002Fnaming",extension:o,createdAt:h,updatedAt:h},{slug:"native-datetime",toc:[],body:{type:m,children:[{type:b,tag:d,props:{},children:[{type:a,value:"\n  По умолчанию, в Laravel используется мощный пакет для работы с датами\n  "},{type:b,tag:E,props:{title:M,link:"https:\u002F\u002Fcarbon.nesbot.com\u002Fdocs\u002F"},children:[]},{type:a,value:", который наследуется от нативного\n  "},{type:b,tag:E,props:{title:"DateTime",link:"https:\u002F\u002Fwww.php.net\u002Fmanual\u002Fru\u002Fclass.datetime.php"},children:[]},{type:a,value:v}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  Поля модели такие как "},{type:b,tag:f,props:{className:[g]},children:[{type:a,value:"created_at"}]},{type:a,value:N},{type:b,tag:f,props:{className:[g]},children:[{type:a,value:"updated_at"}]},{type:a,value:N},{type:b,tag:f,props:{className:[g]},children:[{type:a,value:"deleted_at"}]},{type:a,value:"\n  и другие, которые имеют каст, содержат не строку, а объект "},{type:b,tag:f,props:{className:[g]},children:[{type:a,value:"\\Carbon\\Carbon"}]},{type:a,value:",\n  поэтому нет смысла и необходимости повторно оборачивать в "},{type:b,tag:f,props:{className:[g]},children:[{type:a,value:"\\DateTime"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:i,props:{name:"bad-practices\u002Fcarbon-date\u002Fbad",type:q},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  Код выше работает, потому что "},{type:b,tag:f,props:{className:[g,l]},children:[{type:a,value:"$post-\u003Ecreated_at"}]},{type:a,value:" имеет метод\n  "},{type:b,tag:f,props:{className:[g,l]},children:[{type:a,value:"toString()"}]},{type:a,value:". В результате объект конвертируется в строку,\n  чтобы создать новый объект, но уже нативный, а не "},{type:b,tag:f,props:{className:[g]},children:[{type:a,value:M}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  Вместо этого сразу можно работать с датой как с объектом:\n"}]},{type:a,value:c},{type:b,tag:i,props:{name:"bad-practices\u002Fcarbon-date\u002Fgood",type:r},children:[]}]},dir:n,path:"\u002Fbad-practices\u002Fnative-datetime",extension:o,createdAt:h,updatedAt:h},{slug:"scopes",toc:[],body:{type:m,children:[{type:b,tag:d,props:{},children:[{type:a,value:"\n  Часто необходимо выбирать данные из БД по одинаковым условиям.\n  Чтобы избежать дублирования кода, используются "},{type:b,tag:s,props:{title:"«Scopes»",uri:"eloquent#query-scopes"},children:[]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:i,props:{name:"bad-practices\u002Fscopes\u002Fbad",type:q},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  Кроме дублирования, скоупы повышают читаемость запроса (если правильно именованы).\n"}]},{type:a,value:c},{type:b,tag:i,props:{name:"bad-practices\u002Fscopes\u002Fgood",type:r},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  Также можно использовать глобальные скоупы, которые будут применяться ко всем запросам автоматически.\n  Это может быть удобно, чтобы гарантировать выборку только активных записей\n  (по такому принципу работает soft delete).\n  Но рекомендую прежде подумать, что будет выгоднее для твоего приложения,\n  прописывать везде скоупы или "},{type:b,tag:f,props:{className:[g,l]},children:[{type:a,value:"withoutGlobalScope()"}]},{type:a,value:".\n  Также глобальные скоупы снижают очевидность запроса,\n  т.е. сложно, посмотрев на QB, сказать какие записи выбираются без проверки глобальных скоупов\n  и этот момент придётся держать в памяти.\n"}]}]},dir:n,path:"\u002Fbad-practices\u002Fscopes",extension:o,createdAt:h,updatedAt:h},{slug:"slim-controllers",toc:[],body:{type:m,children:[{type:b,tag:d,props:{},children:[{type:a,value:"\n  Некоторые разработчики буквально воспринимают понятие \"тонкие контроллеры\" и пишут такой код:\n"}]},{type:a,value:c},{type:b,tag:i,props:{name:"bad-practices\u002Fslim-controllers\u002Fbad",type:q},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  Здесь явное нарушение SRP: "},{type:b,tag:f,props:{className:[g,l]},children:[{type:a,value:"PostService"}]},{type:a,value:"\n  зависит от "},{type:b,tag:f,props:{className:[g,l]},children:[{type:a,value:"Request"}]},{type:a,value:" и отвечает за "},{type:b,tag:f,props:{className:[g,l]},children:[{type:a,value:"Response"}]},{type:a,value:",\n  В результате такой сервис нельзя нигде переиспользовать, а смысл контроллера сводится к нулю.\n"}]}]},dir:n,path:"\u002Fbad-practices\u002Fslim-controllers",extension:o,createdAt:h,updatedAt:h},{slug:"validation",toc:[],body:{type:m,children:[{type:b,tag:d,props:{},children:[{type:a,value:"\n  Сама по себе валидация в контроллере не критична, т.к. контроллер отвечает за обработку запроса\n  и ответ в случае какой-либо ошибки.\n  Но это загрязняет методы контроллера и всё же нарушает SRP, тем более в Laravel есть готовый механизм\n  для таких задач.\n"}]},{type:a,value:c},{type:b,tag:i,props:{name:"bad-practices\u002Fvalidation\u002Fbad",type:q},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"\n  Вместо валидации в контроллерах используй "},{type:b,tag:s,props:{title:O,uri:"validation#form-request-validation"},children:[]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:i,props:{name:"bad-practices\u002Fvalidation\u002Fgood",type:r},children:[]},{type:a,value:c},{type:b,tag:D,props:{},children:[{type:a,value:p},{type:b,tag:w,props:{},children:[{type:a,value:"\n    для каждого запроса используется свой "},{type:b,tag:f,props:{className:[g,l]},children:[{type:a,value:O}]},{type:a,value:".\n    Не стоит делать общий "},{type:b,tag:f,props:{className:[g,l]},children:[{type:a,value:"PostRequest"}]},{type:a,value:",\n    даже если правила в конечном итоге получились одинаковыми.\n  "}]},{type:a,value:p},{type:b,tag:w,props:{},children:[{type:a,value:"\n    Не используй в контроллере ручное создание валидатора "},{type:b,tag:f,props:{className:[g,l]},children:[{type:a,value:P}]},{type:a,value:"\n    без явной на то необходимости. В случае возникновения ошибки валидации,\n    фреймворк сам вернёт ошибку и завершит выполнение.\n    Иначе при использовании "},{type:b,tag:f,props:{className:[g,l]},children:[{type:a,value:P}]},{type:a,value:" необходимо\n    также вручную сформировать ответ.\n  "}]},{type:a,value:c}]}]},dir:n,path:"\u002Fbad-practices\u002Fvalidation",extension:o,createdAt:h,updatedAt:h}]}],fetch:{"CodeChips:0":{_error:{message:"request to http:\u002F\u002Flocalhost:3000\u002F_content\u002Fcode-chips\u002Fout\u002Fbad-practices\u002Fslim-controllers\u002Fbad.md failed, reason: connect ECONNREFUSED 127.0.0.1:3000",type:j,errno:e,code:e,statusCode:k}},"CodeChips:1":{_error:{message:"request to http:\u002F\u002Flocalhost:3000\u002F_content\u002Fcode-chips\u002Fout\u002Fbad-practices\u002Fconstructor-controller\u002Fbad.md failed, reason: connect ECONNREFUSED 127.0.0.1:3000",type:j,errno:e,code:e,statusCode:k}},"CodeChips:2":{_error:{message:"request to http:\u002F\u002Flocalhost:3000\u002F_content\u002Fcode-chips\u002Fout\u002Fbad-practices\u002Fconstructor-controller\u002Fgood.md failed, reason: connect ECONNREFUSED 127.0.0.1:3000",type:j,errno:e,code:e,statusCode:k}},"CodeChips:3":{_error:{message:"request to http:\u002F\u002Flocalhost:3000\u002F_content\u002Fcode-chips\u002Fout\u002Fbad-practices\u002Fheavy-views\u002Fbad.md failed, reason: connect ECONNREFUSED 127.0.0.1:3000",type:j,errno:e,code:e,statusCode:k}},"CodeChips:4":{_error:{message:"request to http:\u002F\u002Flocalhost:3000\u002F_content\u002Fcode-chips\u002Fout\u002Fbad-practices\u002Fheavy-views\u002Fgood.md failed, reason: connect ECONNREFUSED 127.0.0.1:3000",type:j,errno:e,code:e,statusCode:k}},"CodeChips:5":{_error:{message:"request to http:\u002F\u002Flocalhost:3000\u002F_content\u002Fcode-chips\u002Fout\u002Fbad-practices\u002Fheavy-routes\u002Fbad.md failed, reason: connect ECONNREFUSED 127.0.0.1:3000",type:j,errno:e,code:e,statusCode:k}},"CodeChips:6":{_error:{message:"request to http:\u002F\u002Flocalhost:3000\u002F_content\u002Fcode-chips\u002Fout\u002Fbad-practices\u002Fheavy-routes\u002Fgood.md failed, reason: connect ECONNREFUSED 127.0.0.1:3000",type:j,errno:e,code:e,statusCode:k}},"CodeChips:7":{_error:{message:"request to http:\u002F\u002Flocalhost:3000\u002F_content\u002Fcode-chips\u002Fout\u002Fbad-practices\u002Fvalidation\u002Fbad.md failed, reason: connect ECONNREFUSED 127.0.0.1:3000",type:j,errno:e,code:e,statusCode:k}},"CodeChips:8":{_error:{message:"request to http:\u002F\u002Flocalhost:3000\u002F_content\u002Fcode-chips\u002Fout\u002Fbad-practices\u002Fvalidation\u002Fgood.md failed, reason: connect ECONNREFUSED 127.0.0.1:3000",type:j,errno:e,code:e,statusCode:k}},"CodeChips:9":{_error:{message:"request to http:\u002F\u002Flocalhost:3000\u002F_content\u002Fcode-chips\u002Fout\u002Fbad-practices\u002Fwhile-query\u002Fbad.md failed, reason: connect ECONNREFUSED 127.0.0.1:3000",type:j,errno:e,code:e,statusCode:k}},"CodeChips:10":{_error:{message:"request to http:\u002F\u002Flocalhost:3000\u002F_content\u002Fcode-chips\u002Fout\u002Fbad-practices\u002Fwhile-query\u002Fgood.md failed, reason: connect ECONNREFUSED 127.0.0.1:3000",type:j,errno:e,code:e,statusCode:k}},"CodeChips:11":{_error:{message:"request to http:\u002F\u002Flocalhost:3000\u002F_content\u002Fcode-chips\u002Fout\u002Fbad-practices\u002Flazy-load\u002Fbad.md failed, reason: connect ECONNREFUSED 127.0.0.1:3000",type:j,errno:e,code:e,statusCode:k}},"CodeChips:12":{_error:{message:"request to http:\u002F\u002Flocalhost:3000\u002F_content\u002Fcode-chips\u002Fout\u002Fbad-practices\u002Flazy-load\u002Fgood.md failed, reason: connect ECONNREFUSED 127.0.0.1:3000",type:j,errno:e,code:e,statusCode:k}},"CodeChips:13":{_error:{message:"request to http:\u002F\u002Flocalhost:3000\u002F_content\u002Fcode-chips\u002Fout\u002Fbad-practices\u002Fget-user\u002Fbad.md failed, reason: connect ECONNREFUSED 127.0.0.1:3000",type:j,errno:e,code:e,statusCode:k}},"CodeChips:14":{_error:{message:"request to http:\u002F\u002Flocalhost:3000\u002F_content\u002Fcode-chips\u002Fout\u002Fbad-practices\u002Fget-user\u002Fgood.md failed, reason: connect ECONNREFUSED 127.0.0.1:3000",type:j,errno:e,code:e,statusCode:k}},"CodeChips:15":{_error:{message:"request to http:\u002F\u002Flocalhost:3000\u002F_content\u002Fcode-chips\u002Fout\u002Fbad-practices\u002Fmodel-update\u002Fwarning.md failed, reason: connect ECONNREFUSED 127.0.0.1:3000",type:j,errno:e,code:e,statusCode:k}},"CodeChips:16":{_error:{message:"request to http:\u002F\u002Flocalhost:3000\u002F_content\u002Fcode-chips\u002Fout\u002Fbad-practices\u002Fmodel-update\u002Fgood.md failed, reason: connect ECONNREFUSED 127.0.0.1:3000",type:j,errno:e,code:e,statusCode:k}},"CodeChips:17":{_error:{message:"request to http:\u002F\u002Flocalhost:3000\u002F_content\u002Fcode-chips\u002Fout\u002Fbad-practices\u002Fmass-assignment\u002Fbad.md failed, reason: connect ECONNREFUSED 127.0.0.1:3000",type:j,errno:e,code:e,statusCode:k}},"CodeChips:18":{_error:{message:"request to http:\u002F\u002Flocalhost:3000\u002F_content\u002Fcode-chips\u002Fout\u002Fbad-practices\u002Fmass-assignment\u002Fgood.md failed, reason: connect ECONNREFUSED 127.0.0.1:3000",type:j,errno:e,code:e,statusCode:k}},"CodeChips:19":{_error:{message:"request to http:\u002F\u002Flocalhost:3000\u002F_content\u002Fcode-chips\u002Fout\u002Fbad-practices\u002Fmass-assignment\u002Fcompromise.md failed, reason: connect ECONNREFUSED 127.0.0.1:3000",type:j,errno:e,code:e,statusCode:k}},"CodeChips:20":{_error:{message:"request to http:\u002F\u002Flocalhost:3000\u002F_content\u002Fcode-chips\u002Fout\u002Fbad-practices\u002Fheavy-query\u002Fbad.md failed, reason: connect ECONNREFUSED 127.0.0.1:3000",type:j,errno:e,code:e,statusCode:k}},"CodeChips:21":{_error:{message:"request to http:\u002F\u002Flocalhost:3000\u002F_content\u002Fcode-chips\u002Fout\u002Fbad-practices\u002Fheavy-query\u002Fgood.md failed, reason: connect ECONNREFUSED 127.0.0.1:3000",type:j,errno:e,code:e,statusCode:k}},"CodeChips:22":{_error:{message:"request to http:\u002F\u002Flocalhost:3000\u002F_content\u002Fcode-chips\u002Fout\u002Fbad-practices\u002Fheavy-query\u002Fchunk.md failed, reason: connect ECONNREFUSED 127.0.0.1:3000",type:j,errno:e,code:e,statusCode:k}},"CodeChips:23":{_error:{message:"request to http:\u002F\u002Flocalhost:3000\u002F_content\u002Fcode-chips\u002Fout\u002Fbad-practices\u002Ffilter-collection\u002Fbad.md failed, reason: connect ECONNREFUSED 127.0.0.1:3000",type:j,errno:e,code:e,statusCode:k}},"CodeChips:24":{_error:{message:"request to http:\u002F\u002Flocalhost:3000\u002F_content\u002Fcode-chips\u002Fout\u002Fbad-practices\u002Ffilter-collection\u002Fgood.md failed, reason: connect ECONNREFUSED 127.0.0.1:3000",type:j,errno:e,code:e,statusCode:k}},"CodeChips:25":{_error:{message:"request to http:\u002F\u002Flocalhost:3000\u002F_content\u002Fcode-chips\u002Fout\u002Fbad-practices\u002Fhardcode\u002Fbad.md failed, reason: connect ECONNREFUSED 127.0.0.1:3000",type:j,errno:e,code:e,statusCode:k}},"CodeChips:26":{_error:{message:"request to http:\u002F\u002Flocalhost:3000\u002F_content\u002Fcode-chips\u002Fout\u002Fbad-practices\u002Fhardcode\u002Fgood.md failed, reason: connect ECONNREFUSED 127.0.0.1:3000",type:j,errno:e,code:e,statusCode:k}},"CodeChips:27":{_error:{message:"request to http:\u002F\u002Flocalhost:3000\u002F_content\u002Fcode-chips\u002Fout\u002Fbad-practices\u002Fdi\u002Fbad.md failed, reason: connect ECONNREFUSED 127.0.0.1:3000",type:j,errno:e,code:e,statusCode:k}},"CodeChips:28":{_error:{message:"request to http:\u002F\u002Flocalhost:3000\u002F_content\u002Fcode-chips\u002Fout\u002Fbad-practices\u002Fdi\u002Fgood.md failed, reason: connect ECONNREFUSED 127.0.0.1:3000",type:j,errno:e,code:e,statusCode:k}},"CodeChips:29":{_error:{message:"request to http:\u002F\u002Flocalhost:3000\u002F_content\u002Fcode-chips\u002Fout\u002Fbad-practices\u002Fscopes\u002Fbad.md failed, reason: connect ECONNREFUSED 127.0.0.1:3000",type:j,errno:e,code:e,statusCode:k}},"CodeChips:30":{_error:{message:"request to http:\u002F\u002Flocalhost:3000\u002F_content\u002Fcode-chips\u002Fout\u002Fbad-practices\u002Fscopes\u002Fgood.md failed, reason: connect ECONNREFUSED 127.0.0.1:3000",type:j,errno:e,code:e,statusCode:k}},"CodeChips:31":{_error:{message:"request to http:\u002F\u002Flocalhost:3000\u002F_content\u002Fcode-chips\u002Fout\u002Fbad-practices\u002Fcarbon-date\u002Fbad.md failed, reason: connect ECONNREFUSED 127.0.0.1:3000",type:j,errno:e,code:e,statusCode:k}},"CodeChips:32":{_error:{message:"request to http:\u002F\u002Flocalhost:3000\u002F_content\u002Fcode-chips\u002Fout\u002Fbad-practices\u002Fcarbon-date\u002Fgood.md failed, reason: connect ECONNREFUSED 127.0.0.1:3000",type:j,errno:e,code:e,statusCode:k}},"CodeChips:33":{_error:{message:"request to http:\u002F\u002Flocalhost:3000\u002F_content\u002Fcode-chips\u002Fout\u002Fbad-practices\u002Fdocument-root\u002Fbad.md failed, reason: connect ECONNREFUSED 127.0.0.1:3000",type:j,errno:e,code:e,statusCode:k}},"CodeChips:34":{_error:{message:"request to http:\u002F\u002Flocalhost:3000\u002F_content\u002Fcode-chips\u002Fout\u002Fbad-practices\u002Fdocument-root\u002Fgood.md failed, reason: connect ECONNREFUSED 127.0.0.1:3000",type:j,errno:e,code:e,statusCode:k}},"CodeChips:35":{_error:{message:"request to http:\u002F\u002Flocalhost:3000\u002F_content\u002Fcode-chips\u002Fout\u002Fbad-practices\u002Fnaming\u002Fbad.md failed, reason: connect ECONNREFUSED 127.0.0.1:3000",type:j,errno:e,code:e,statusCode:k}},"CodeChips:36":{_error:{message:"request to http:\u002F\u002Flocalhost:3000\u002F_content\u002Fcode-chips\u002Fout\u002Fbad-practices\u002Fnaming\u002Fgood.md failed, reason: connect ECONNREFUSED 127.0.0.1:3000",type:j,errno:e,code:e,statusCode:k}}},mutations:[]}}("text","element","\n","p","ECONNREFUSED","span","bit","2022-08-14T20:25:14.422Z","code-chips","system",500,"code","root","\u002Fbad-practices",".md","\n  ","bad","good","laravel-link","b","path",".\n","li","документации","mb-3","variable","br","public","nuxt-link","bad-practice-notices","external-link","env()","документацию","storage\u002Fapp","all()","Auth::user()","api","ml-3","Carbon",",\n  ","FormRequest","Validator::make()")));